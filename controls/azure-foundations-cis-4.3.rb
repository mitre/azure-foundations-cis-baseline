control 'azure-foundations-cis-4.3' do
  title "Ensure that 'Enable key rotation reminders' is enabled for each Storage Account"
  desc "Access Keys authenticate application access requests to data contained in Storage
        Accounts. A periodic rotation of these keys is recommended to ensure that potentially
        compromised keys cannot result in a long-term exploitable credential. The 'Rotation
        Reminder' is an automatic reminder feature for a manual procedure."

  desc 'rationale',
       "Reminders such as those generated by this recommendation will help maintain a
        regular and healthy cadence for activities which improve the overall efficacy of a
        security program.
        Cryptographic key rotation periods will vary depending on your organization's security
        requirements and the type of data which is being stored in the Storage Account. For
        example, PCI DSS mandates that cryptographic keys be replaced or rotated 'regularly,'
        and advises that keys for static data stores be rotated every 'few months.'
        For the purposes of this recommendation, 90 days will prescribed for the reminder.
        Review and adjustment of the 90 day period is recommended, and may even be
        necessary. Your organization's security requirements should dictate the appropriate
        setting."

  desc 'impact',
       "This recommendation only creates a periodic reminder to regenerate access keys.
        Regenerating access keys can affect services in Azure as well as the organization's
        applications that are dependent on the storage account. All clients that use the access
        key to access the storage account must be updated to use the new key."

  desc 'check',
       "Audit from Azure Portal
        1. Go to Storage Accounts
        2. For each Storage Account, under Security + networking, go to Access keys
        3. If the button Edit rotation reminder is displayed, the Storage Account is
        compliant. Click Edit rotation reminder and review the Remind me every
        field for a desirable periodic setting that fits your security program's needs. If the
        button Set rotation reminder is displayed, the Storage Account is not
        compliant.
        Audit from Powershell
        $rgName = <resource group name for the storage>
        $accountName = <storage account name>
        $account = Get-AzStorageAccount -ResourceGroupName $rgName -Name $accountName
        Write-Output $accountName ->
        Write-Output 'Expiration Reminder set to:
        $($account.KeyPolicy.KeyExpirationPeriodInDays) Days'
        Write-Output 'Key1 Last Rotated:
        $($account.KeyCreationTime.Key1.ToShortDateString())'
        Write-Output 'Key2 Last Rotated:
        $($account.KeyCreationTime.Key2.ToShortDateString())'
        Key rotation is recommended if the creation date for any key is empty.
        If the reminder is set, the period in days will be returned. The recommended period is 90
        days."

  desc 'fix',
       "Remediate from Azure Portal
        1. Go to Storage Accounts
        2. For each Storage Account that is not compliant, under Security +
        networking, go to Access keys
        3. Click Set rotation reminder
        4. Check Enable key rotation reminders
        5. In the Send reminders field select Custom, then set the Remind me every field
        to 90 and the period drop down to Days
        6. Click Save
        Remediate from Powershell
        $rgName = <resource group name for the storage>
        $accountName = <storage account name>
        $account = Get-AzStorageAccount -ResourceGroupName $rgName -Name $accountName
        if ($account.KeyCreationTime.Key1 -eq $null -or $account.KeyCreationTime.Key2
        -eq $null){
        Write-output ('You must regenerate both keys at least once before
        setting expiration policy')
        } else {
        $account = Set-AzStorageAccount -ResourceGroupName $rgName -Name
        $accountName -KeyExpirationPeriodInDay 90
        }
        $account.KeyPolicy.KeyExpirationPeriodInDays"

  impact 0.5
  tag nist: ['CM-1', 'CM-2', 'CM-6', 'CM-7', 'CM-7(1)', 'CM-9', 'SA-3', 'SA-8', 'SA-10', 'SI-4']
  tag severity: 'medium'
  tag cis_controls: [{ '8' => ['4.1', '13.11'] }]

  ref 'https://docs.microsoft.com/en-us/azure/storage/common/storage-create-storage-account#regenerate-storage-access-keys'
  ref 'https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-privileged-access#pa-1-separate-and-limit-highly-privilegedadministrative-users'
  ref 'https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-identity-management#im-3-manage-application-identities-securely-and-automatically'
  ref 'https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-governance-strategy#gs-6-define-and-implement-identity-and-privileged-access-strategy'
  ref 'https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-identity-management#im-8-restrict-the-exposure-of-credentials-and-secrets'
  ref 'https://www.pcidssguide.com/pci-dss-key-rotation-requirements/'
  ref 'https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57pt1r5.pdf'

  storage_script = 'Get-AzStorageAccount | ConvertTo-Json'
  storage_output = powershell(storage_script).stdout.strip
  all_storage = json(content: storage_output).params

  only_if('N/A - No Storage Accounts found', impact: 0) do
    case all_storage
    when Array
      !all_storage.empty?
    when Hash
      !all_storage.empty?
    else
      false
    end
  end

  rg_sa_list = input('resource_groups_and_storage_accounts')

  rg_sa_list.each do |pair|
    resource_group, storage_account = pair.split('.')

    describe "Storage Account '#{storage_account}' in Resource Group '#{resource_group}'" do
      script = <<-EOH
                $account = Get-AzStorageAccount -ResourceGroupName "#{resource_group}" -Name "#{storage_account}"
                $result = [PSCustomObject]@{
                    Name                      = "#{storage_account}"
                    KeyExpirationPeriodInDays = $account.KeyPolicy.KeyExpirationPeriodInDays
                    Key1CreationTime          = if ($account.KeyCreationTime.Key1) { $account.KeyCreationTime.Key1.ToString("yyyy-MM-dd") } else { "" }
                    Key2CreationTime          = if ($account.KeyCreationTime.Key2) { $account.KeyCreationTime.Key2.ToString("yyyy-MM-dd") } else { "" }
                }
                $result | ConvertTo-Json -Compress
      EOH

      account_info = json(command: "pwsh -NoProfile -NonInteractive -Command '#{script}'")

      describe 'Key Expiration Reminder' do
        it 'should be set to 90 days' do
          expect(account_info['KeyExpirationPeriodInDays']).to cmp 90
        end
      end

      describe 'Key1 Creation Time' do
        it 'should not be empty' do
          expect(account_info['Key1CreationTime']).not_to eq('')
        end
      end

      describe 'Key2 Creation Time' do
        it 'should not be empty' do
          expect(account_info['Key2CreationTime']).not_to eq('')
        end
      end
    end
  end
end
